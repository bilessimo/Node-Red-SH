#include <Arduino.h>  // Only necessary if using VSCode

/***************************************
  Version alpha 2.0
  Sketch to receive a message in the SoftwareSerial, parse in five different variables and print them in the Serial Monitor.
  Made following the awesome tutorial on Arduino's serial communications at https://forum.arduino.cc/index.php?topic=396450.0
****************************************/

#include <SoftwareSerial.h>

SoftwareSerial softSerial(2, 3); // RX, TX


const byte numChars = 64;
const byte wordChars = 15;
char separator = ',';

char receivedChars[numChars];   // an array to store the received data

boolean newData = false;

int pumpPin = 11;
int sensor0 = A0;

bool irrigating = false;
int period = 3000;
unsigned long time_now = 0;


bool isOverrideOn = false;
bool isPumpOn = false;
bool isIrrigationNeeded = false;
bool isForcedIrrigationWanted = false;

int sensorRipple;
char* sensRipple = "sensRipple";

int sensor0Reading = 30; // Using a value just for tests. 
int sensor0OldReading = 0;
int sensor0Threshold;  
char* sens0Threshold = "sens0Threshold";

int sensor1Reading = 50;  // Using a value just for tests. 
int sensor1OldReading = 0;
int sensor1Threshold;
char* sens1Threshold = "sens1Threshold";


// This block is only necessary if you're using VSCode. If you're using the Arduino IDE, it does this for you.
void ReadSensors();
void PumpControl();
void CheckForMessages();
void ParseMessage(char fullMessage[]);
void InterpretCommand(char* part, char* command, int arg_0, int arg_1, float arg_2);
void ServerCommand(char* command);
void OverrideCommand(char* command);
void SetupFunction(char* command, int arg_0);
void PumpCommand(char* command);
void ResetStatus();
void SendStatus();

void setup() {

  pinMode(pumpPin, OUTPUT);
  digitalWrite(pumpPin, LOW);
  pinMode(sensor0, INPUT);

  Serial.begin(115200); // Open serial communications.
  softSerial.begin(9600); // Set the data rate for the SoftwareSerial port.

  SetupFunction(sensRipple, 2);
  SetupFunction(sens0Threshold, 55);
  SetupFunction(sens1Threshold, 65);

  delay(2000);
  Serial.println("System initialized");

}

void loop () {
  CheckForMessages();
  ReadSensors();
  PumpControl();

}

void ReadSensors() {
  sensor0Reading = analogRead(sensor0);
  sensor0Reading = map(sensor0Reading, 1000, 100, 0, 100);

  if(sensor0Reading < sensor0OldReading - sensor0Threshold || 
  sensor0Reading > sensor0OldReading + sensor0Threshold) {
    sensor0OldReading = sensor0Reading;
    Serial.println(sensor0Reading);
    SendStatus();
  }

  if(sensor0Reading < sensor0Threshold) {
    isIrrigationNeeded = true;
  } else {
    isIrrigationNeeded = false;
  }

}

void PumpControl() {
  
  if(irrigating && isOverrideOn) {
    time_now = millis();
    digitalWrite(pumpPin, HIGH);
    
    Serial.print("irrigating = ");
    Serial.println(irrigating);
    Serial.println("Irrigation started");
   
    // I found out how to use millis() (and why use it) in the tutotial at https://www.norwegiancreations.com/2017/09/arduino-tutorial-using-millis-instead-of-delay/
    while(millis() < time_now + period){
       
    }

    digitalWrite(pumpPin, LOW);
    irrigating = false;
    isForcedIrrigationWanted = false;
    Serial.print("irrigating = ");
    Serial.println(irrigating);
    Serial.println("Irrigation stopped");
    SendStatus();
  }
  
  if (isIrrigationNeeded && !isOverrideOn) {
    digitalWrite(pumpPin, HIGH);
  } else if (!isIrrigationNeeded && !isOverrideOn){
    digitalWrite(pumpPin, LOW);
  }
}

void CheckForMessages() {

  static boolean recvInProgress = false;
  static byte receivedCharsIndex = 0;
  char startMarker = '<';
  char endMarker = '>';
  char rc;

  while (softSerial.available() > 0) {

    rc = softSerial.read();

    if (recvInProgress == true) {

      if (rc != endMarker) {
        receivedChars[receivedCharsIndex] = rc;
        receivedCharsIndex++;

        if (receivedCharsIndex >= numChars) {
          receivedCharsIndex = numChars - 1;

        }
      } else {
        receivedChars[receivedCharsIndex] = '\0'; // terminate the string
        recvInProgress = false;
        receivedCharsIndex = 0;

        Serial.print("Message received : ");
        Serial.println(receivedChars);
        ParseMessage(receivedChars);

      }

    } else if (rc == startMarker) {
      recvInProgress = true;
    }
  }
}

void ParseMessage(char fullMessage[]) {
  
  char part[wordChars] = {0};
  char command[wordChars] = {0};
  int arg_0 = 0;
  int arg_1 = 0;
  float arg_2 = 0.0;

  char * strtokIndx; // this is used by strtok() as an index

  strtokIndx = strtok(fullMessage, ","); // get the first part - the string
  strcpy(part, strtokIndx);  // copy it to part

  strtokIndx = strtok(NULL, ",");  // this continues where the previous call left off
  strcpy(command, strtokIndx);  // copy it to command

  strtokIndx = strtok(NULL, ",");
  arg_0 = atoi(strtokIndx);     // convert this part to an integer

  strtokIndx = strtok(NULL, ",");
  arg_1 = atoi(strtokIndx);     // convert this part to an integer

  strtokIndx = strtok(NULL, ",");
  arg_2 = atof(strtokIndx);     // convert this part to a float

  Serial.print("Variables desserialized : part = ");
  Serial.print(part);
  Serial.print(", command = ");
  Serial.print(command);
  Serial.print(", arg_0 = ");
  Serial.print(arg_0);
  Serial.print(", arg_1 = ");
  Serial.print(arg_1);
  Serial.print(", arg_2 = ");
  Serial.println(arg_2);
  InterpretCommand(part, command, arg_0, arg_1, arg_2);
}

void InterpretCommand(char* part, char* command, int arg_0, int arg_1, float arg_2) {

  if  (strcmp(part, "server") == 0) {
    Serial.println("server part identified");
    ServerCommand(command);  
  } else if(strcmp(part, "override") == 0) {
    Serial.println("override part identified");
    OverrideCommand(command);  
  } else if(strcmp(part, "setup") == 0) {
    Serial.println("setup part identified");
    SetupFunction(command, arg_0);  
  } else if(strcmp(part, "pump") == 0) {
    Serial.println("pump part identified");
    PumpCommand(command);  
  } else {
    Serial.print("Part not identified. Part received : ");
    Serial.println(part);
  }
}

void ServerCommand(char* command) {
  if  (strcmp(command, "status") == 0) {
    Serial.println("status command identified");
    SendStatus();
  } else {
    Serial.print("Server command not identified. Command received : ");
    Serial.println(command);
  }
}

void OverrideCommand(char* command) {
  if  (strcmp(command, "on") == 0) {
    isOverrideOn = true;
    Serial.println("override turn on command identified");
    SendStatus();
    
  } else if (strcmp(command, "off") == 0) {
    isOverrideOn = false;
    Serial.println("override turn off command identified");
    SendStatus();

  } else {
    Serial.print("Override command not identified. Command received : ");
    Serial.println(command);
  }
}

void SetupFunction(char* command, int arg_0) {
  if  (strcmp(command, "sensRipple") == 0) {
    Serial.println("Seting Sensor Ripple command identified");
    sensorRipple = arg_0;  
  } else if  (strcmp(command, "sens0Threshold") == 0) {
    Serial.println("Seting Sensor 0 Threshold command identified");
    sensor0Threshold = arg_0;  
  } else if  (strcmp(command, "sens1Threshold") == 0) {
    Serial.println("Seting Sensor 1 Threshold command identified");
    sensor1Threshold = arg_0;  
  } else {
    Serial.print("Setup command not identified. Command received : ");
    Serial.println(command);
    return;
  }

  Serial.print("Setup Update: ");
  Serial.print(command);
  Serial.print(" = ");
  Serial.println(arg_0);
  ResetStatus();

}

void PumpCommand(char* command) {
  if(isOverrideOn) {

    if  (strcmp(command, "on") == 0) {
      isForcedIrrigationWanted = true;
      irrigating = true;
      Serial.println("pump turn on command identified");
      SendStatus();
      
    } else if (strcmp(command, "off") == 0) {
      isForcedIrrigationWanted = false;
      irrigating = false;
      Serial.println("pump turn off command identified");
      SendStatus();

    } else {
      Serial.print("Pump command not identified. Command received : ");
      Serial.println(command);
    }
  } else {
    Serial.println("Can't execute pump command because override is off.");
  }

}

void ResetStatus() {
  isOverrideOn = false;
  isPumpOn = false;
  isIrrigationNeeded = false;

  Serial.println("Reset executed");
  SendStatus();
}

void SendStatus() {
  
  String overrideStatus = String(isOverrideOn);
  
  
  String message = "{'isOverrideOn':'";
  message += isOverrideOn;
  message += "','isPumpOn':'";
  message += isPumpOn;
  message += ",'sensorRipple':";
  message += sensorRipple;
  message += "','sensor0Reading':";
  message += sensor0Reading;
  message += ",'sensor0Threshold':";
  message += sensor0Threshold;
  message += ",'sensor1Reading':";
  message += sensor1Reading;
  message += ",'sensor1Threshold':";
  message += sensor1Threshold;
  message += "}";

  softSerial.println(message);
  Serial.println("Status send");
}
